inlineCHeaders

inlineC "
#include <cglm/vec4.h>
"

range myNum (-100) 1000

range small 0 10

resource Foo {
    u32 x
    f32 y
    [0 u8] bytes // 0 = list
    [16 u16] guid // 16 = array
    string z
    #color c
    #state s
}
f {
    inlineC "// Cleanup foo (named f)"
}

enum MyBool {
    no
    yes
}

struct TestVectors {
    [f32 2] v2
    [f32 3] v3
    [f32 4] v4
    [f32 9] m3
    [f32 16] m4
}

enum color {
    red green blue
}

flag state {
    walking running sleeping
}

variant Bar {
    u32 x
    string y
    f64 z
    null w
}

unary checkBar p_b {
    mlet r_k 0 + i32
    match p_b (r_k) {
        x {
             match x () {
                 10 {
                     print "Mathced Got 10"
                 }
                 {
                    print "Got x: " x
                 }
             }
        }
        y {
            //print "Got y: " y
            set r_k 402
        }
        z {
            //print "Got z: " z
            set r_k 40201
        }
    }
    return r_k
}

unary checkColor p_c {
    mlet r_k 0 + i32
    match p_c (r_k){
        "red" {
            set r_k 40
        }
        "green" {
            set r_k 5032 - 430
        }
        "blue" {
            set r_k -5
        }
    }
    return r_k
}

struct Nested {
    #Temp t
}

struct Temp{
    u8 x
    bool b
}

struct SubFoo{
    #Foo foo
    #Bar bar
    #myNum num
}

unary foo4 p_a {
    //print "Called foo4"
    let r_a p_a
    return p_a
}

nullary foo0 {
    return 452
}

unary foo1 p_a {
    let r_a p_a
    return r_a
}

binary foo2 p_a p_b {
    return p_a + p_b
}

unary foo3 p_b {
    return p_b + 402
}

procedure fooProc ( numArray ) {
    return null :printList numArray
    return null :printList numList
}

inlineFile "examples/fib.tem"

inlineCFile "examples/test.c"

inlineVariable sdlWindow external true

inlineText todoText "TODO.md"
inlineData outputData "build/generated"

procedure mainProc (foo)
{
    let x 10
    let y 20
    let z x + y
    verify z
    let wk x :foo2 y
    constant cx :fib 1056

    let xresult x < y

    let w {
        let x 40
        let y 0975.3
        return x / y
    }

    let w2 05.02 % 042

    let bl true
    let bl2 false
    let bl3 bl & bl2
    let bl4 bl ! null
    let bl5 bl3 | bl4
    let bl6 bl2 ^ bl3
    let bl7 !bl4

    let wsdf {= x 0 103 10 503 (-2042) =} + u32

    let hello "Hello"
    let world "World"
    mlet message hello + " " + world
    append message ". More after"

    mlet mMessage message
    append mMessage 'c'
    remove mMessage 3
    pop mMessage
    empty mMessage

    mlet c 0 + i32

    mlet e "red" + #color

    let e2 e + 1
    let e3 e2 + (-2)

    iterate e (c) {
        set c c + 1
    }

    let eValue e + u8
    let eValue2 2 + #color

    let e2042 null :checkColor e

    mlet s "walking" + #state
    mlet s532 null + #state
    let ssetted s + s532 + ("running" + #state)

    mlet s2 s

    on s2 sleeping
    off s2 running
    toggle s2 sleeping
    all s2
    clear s2

    /*
        Multiline comment

        /* Nested comment */
    */

    mlet f foo

    mlet temps ({{ let x 900 let b true }} + #Temp) * 10

    set temps.3 {{ let x -403 }}

    let wxs temps.5

    let n {{ let t {{ let x 1598740 let b false }} + #Temp }} + #Nested

    let bar #Bar + {{ let x 10 }}

    let barString bar + string

    let unused bar :checkBar null

    let f432 {{ let foo :makeFoo null let bar {{ let w null}} + #Bar let num 4 }} + #SubFoo

    let f_4 :checkBar f432.bar

    mlet b bar

    mlet b2 {{ let z 042.40269 }} + #Bar

    set b2 {{ let y "A message" }} + #Bar

    set b2 {{ let w null }} + #Bar

    mlet numList [(1 + u32) 2 3 4 5]
    mlet numArray [| (1 + u32) 3 4 5 6 4 |]

    mlet numListCopy numList
    mlet numArrayCopy numArray

    insert numListCopy 3 (5031 + u32)
    remove numListCopy 1
    swapremove numListCopy 0
    pop numListCopy
    empty numListCopy

    let fm 503.02 % 4
    let fm2 fm % 5

    while ( c < 10 ) ( c ) {
        set c c + 1
    }

    until ( c < 0 ) ( c ) {
        set c c - 1
    }

    unary printList p_list {
        mlet x 0
        iterate p_list (x) {
            //print "Index " index "\n" "Item" item
            set x x + index
            return index > 3
        }
    }

    match x ( c ) {
        11 {
            set c 40
        }
        {
            set c 502
        }
    }

    inline "let mixinValue -607945.32402"

    let fibResult 10 :fib null

    run fooProc

    let iter 0 + #small

    iterate iter () {
        //print item
        let nx item
    }

    procedure testTempString () {
        let unusedString "Unused string to test RAII"
    }

    run testTempString

    mlet u32Num 0 + u32
    iterate u32Num (u32Num) {
        mlet r_doContinue true
        let unusedString "This string should be cleaned up"
        match (item > 1000) (u32Num r_doContinue) {
            true {
                set r_doContinue false
            }
            {
                set u32Num u32Num + item * 5 / 4
            }
        }
        return r_doContinue
    }

    // mixin "let 43 askl;f420"
}

inlineC "MAKE_FULL_LIST(Foo)"
inlineC "MAKE_FULL_LIST(Bar)"

variant OptionList{
    [0 #Foo] foos
    [0 #Bar] bars
    null none
}

struct TemLangStringListTest {
    [0 string] strings
}

nullary makeFoo {
    let f {{
        let x 8
        let y 042.213
        let z "Hello World"
        // let z 20
        let c "blue" + #color
        let s "walking" + #state
        
        let guid {
            mlet l []u16
            mlet i 1 + #guidRange
            iterate i (l) {
                append l (0 + u16)
            }
            ToArray l r_g
            ToList r_g l2
            return r_g
        }
        let bytes [ (0 + u8) ]
    }}
    let r_f2 f + #Foo
    return r_f2
}

binary biggerPlus9 p_a p_b {
    ifreturn (p_a > p_b) (p_a + 9)
    return (p_b + 9)
}

range guidRange 1 16
inlineCFunction "int32_t Entry()" {
    let foo null :makeFoo

    let bigf 10 :biggerPlus9 40

    inlineC "uint32_t inlinedX = 0;"
    inlineVariable inlinedX u32 true
    set inlinedX 603

    let w532d "502" + u32
    let xfd092 "052.240" + f32

    let bools ("yes" + #MyBool) * 4

    let enumString "red" + #color + string
    let afds "red" + #color
    //print enumString

    let foos []#Foo

    verify afds

    let testVec2 [| (0 + f32) 1.0 |]
    let testVec3 [| (0 + f32) 1.0 0 |]
    let testVec4 [| (0 + f32) 1.0 0 0 |]
    let testMat3 [| (0 + f32) 0 0 
                        0 0 0 
                        0 0 0 |]
    let testMat4 [| (0 + f32) 1 2 3 
                            4 5 6  7
                            0 0 0 0 
                            0 0 0 0 |]

    let testVec {{ 
        let v2 testVec2 let v3 testVec3 let v4 testVec4 
        let m3 testMat3 let m4 testMat4
     }} + #TestVectors

    noCleanup{
        let leakedString "This string will be leaked unless it is in a arena allocator"
        let k {
            let r_x "Another leaked string in scope"
            return r_x
        }
    }

    run mainProc
    return 6
}

inlineCFunctionReturnStruct "TestFunction" "()" {
    let x 40 + u32
    let y 4.53 + f32
    let z "A message"
    inlineC "NullValue somePointer = NULL;"
    inlineVariable somePointer external true
    let k [| (4 + i32) 44 03 (-50) 476 95,945 |]
    let klist []u16
    let klength ##klist
    mlet b true
    toggle b c
    let bar {{ let y "Hello World" }} + #Bar
    let temp {{ let x (8+u8) let b true }} + #Temp

    mlet fib10 0
    NoCompile {
        set fib10 null :fib 10
    }

    /*noCompile {
        struct Test {
            i32 x
        }
    }

    let t {{ let x (40+i32) }} + #Test*/

    let temp64 0 + u64
}

print {
    let args {{ let x 10 let y 4.20 let z "This is a message" let b true let n x }}
    format r_x args "Formatted: %x and %y and %z \%  and x again %x %b %n"
    return r_x
}

